package schleicher.softwareoneproj;

/**
 * @author William Zapata9Schleicher at WGU
 */

import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;

/**
 * This class acts as the controller to the Add Part window, which allows the user to add new parts to the inventory.
 * */
public class AddPart {
    /**InHouse radio button*/
    public RadioButton addPartInHouse;
    /**OutSourced radio button*/
    public RadioButton addPartOutsourced;
    /**Groups radio buttons together as a toggle*/
    public ToggleGroup addPart;
    /**The ID text field*/
    public TextField addPartIDField;
    /**The name text field*/
    public TextField addPartNameField;
    /**The stock text field*/
    public TextField addPartInvField;
    /**The price text field*/
    public TextField addPartPriceField;
    /**The max text field*/
    public TextField addPartMaxField;
    /**The machine ID / company name text field*/
    public TextField addPartMachineIDField;
    /**The min text field*/
    public TextField addPartMinField;
    /**The machine ID toggle label*/
    public Label machineIDToggle;
    /**Stage*/
    private Stage stage;
    /**Scene*/
    private Scene scene;
    /**Button to save part*/
    public Button addPartSave;
    /**Button to cancel adding part*/
    public Button addPartCancel;

    /**
     * Populates the autogenerated ID field.
     * */
    public void initialize(){
        addPartIDField.setText(Inventory.PartCounter + " (auto-generated)");
    }

    /**
     * Saves the user's input and then switches back to the main screen if the input is successful after error checks.
     * */
    public void onAddPartSave(ActionEvent event) throws IOException {

        int addPartError = 0;

        //Auto assign partID with counter & update counter
        int partID = Inventory.PartCounter;

        //Assign rest of part characteristics w/ text fields
        String partName = addPartNameField.getText();

        String tempText2 = addPartInvField.getText();
        int partInvLevel = 0;
        try {
            partInvLevel = Integer.parseInt(tempText2);
        }

        catch (Exception partInvException){
            Alert alert = new Alert(Alert.AlertType.ERROR,
                    "Error, please use an int in the Inv field.");
            alert.showAndWait();
            return;
            //addPartInvField.setText("Error, please use an int!");
            //addPartError = 1;
        }

        String tempText3 = addPartPriceField.getText();
        double partPrice = 0.0;
        try {
            partPrice = Double.parseDouble(tempText3);
        }

        catch (Exception partPriceException) {
            Alert alert = new Alert(Alert.AlertType.ERROR,
                    "Please use a number in the Price field.");
            alert.showAndWait();
            return;
            //addPartPriceField.setText("Error, please use a num!");
            //addPartError = 1;
        }

        String tempText4 = addPartMinField.getText();
        int min = 0;
        try {
            min = Integer.parseInt(tempText4);
        }

        catch (Exception partMinException) {
            Alert alert = new Alert(Alert.AlertType.ERROR,
                    "Please use an int in the min field.");
            alert.showAndWait();
            return;
            //addPartMinField.setText("Error, please use an int!");
            //addPartError = 1;
        }

        String tempText5 = addPartMaxField.getText();
        int max = 0;
        try {
            max = Integer.parseInt(tempText5);
        }

        catch (Exception partMaxException) {
            Alert alert = new Alert(Alert.AlertType.ERROR,
                    "Please enter an int in the max field.");
            alert.showAndWait();
            return;
            //addPartMaxField.setText("Error, please use an int!");
            //addPartError = 1;
        }

        //Check to see max is greater than min
        if (max < min){
            //addPartError = 1;
            Alert alert = new Alert(Alert.AlertType.ERROR,
                    "Please make sure the max is equal to or greater than the min.");
            alert.showAndWait();
            return;
            //errorMessage.setText("Error: min must be equal to or less than max");
        }

        //A check to see if Inv is between min and max
        if (partInvLevel > max || partInvLevel < min) {
            Alert alert = new Alert(Alert.AlertType.ERROR,
                    "Please make sure the Inv is at or in between the max and the min.");
            alert.showAndWait();
            return;
        }

        if (addPartInHouse.isSelected()) {
            InHouse tempPart = new InHouse(partID, partName, partInvLevel, partPrice, min, max);

            try {
                int tempInt = Integer.parseInt(addPartMachineIDField.getText());
                tempPart.setMachineID(tempInt);
            }
            catch (Exception exception){
                Alert alert = new Alert(Alert.AlertType.ERROR,
                        "Please use an int in the machine ID field.");
                alert.showAndWait();
                return;
            }
            Inventory.addPart(tempPart);
            //System.out.println(tempPart.getMachineID());
        }

        else {
            OutSourced tempPart = new OutSourced(partID, partName, partInvLevel, partPrice, min, max);
            tempPart.setCoName(addPartMachineIDField.getText());
            Inventory.addPart(tempPart);
        }

        Parent root = FXMLLoader.load(getClass().getResource("mainView.fxml"));
        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setTitle("Inventory Management System - Home");
        stage.setScene(scene);
        stage.show();

        //Assuming code ran and new part added, update the ID counter
        Inventory.PartCounter = Inventory.PartCounter + 1;

        }
    //Scene switch code derived from https://www.youtube.com/watch?v=hcM-R-YOKkQ and WGU webinars


    /**
     * Cancels user input and switches back to the main screen.
     * */
    public void onAddPartCancel(ActionEvent event) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("mainView.fxml"));
        stage = (Stage)((Node)event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setTitle("Inventory Management System - Home");
        stage.setScene(scene);
        stage.show();
    }
    //Scene switch code derived from https://www.youtube.com/watch?v=hcM-R-YOKkQ and WGU webinars

    /**
     * Updates text to Machine ID upon selecting InHouse part type
    */
    public void onAddPartInHouse(ActionEvent actionEvent) {
        machineIDToggle.setText("Machine ID");
    }

    /**
     * Updates text to Co. Name upon selecting Outsourced part type
     */
    public void onAddPartOutsourced(ActionEvent actionEvent) {
        machineIDToggle.setText("Co. Name");
    }
}
